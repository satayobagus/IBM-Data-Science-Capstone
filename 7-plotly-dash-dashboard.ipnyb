# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

#Dropdown list items
sites=[{'label': 'All Sites', 'value': 'ALL'}]
for i in spacex_df["Launch Site"].unique():
    sites.append({'label': i, 'value': i})

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                dcc.Dropdown(id='site-dropdown',
                                options=sites,
                                value='ALL',
                                placeholder='Select a Launch Site',
                                searchable=True),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                # Function decorator to specify function input and output                                    
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),                   
                                
                                # TASK 3: Add a slider to select payload range
                                html.P("Payload range (Kg):"),
                                dcc.RangeSlider(id='payload-slider',
                                min=0, max=10000, step=1000,
                                marks={0: '0', 2500: '2500', 5000: '5000', 7500: '7500', 10000: '10000'},
                                value=[min_payload, max_payload]),
                                html.Br(), 

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
# Function decorator to specify function input and output
@app.callback(Output(component_id='success-pie-chart', component_property='figure'),
              Input(component_id='site-dropdown', component_property='value'))
def get_pie_chart(entered_site):
    filtered_df = spacex_df[["Launch Site","class"]]
    if (entered_site == 'ALL'):
        fig = px.pie(filtered_df.groupby("Launch Site", as_index=False).sum(), 
        values='class', 
        names='Launch Site', 
        title='Total Success Launches by Site')
    else:
        fig = px.pie(filtered_df[filtered_df["Launch Site"]==entered_site].groupby("class", as_index=False).count().rename(columns={"Launch Site":"count"}), 
        values='count', 
        names='class', 
        title='Total Success Launches for site ' + entered_site)
    return fig


# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),
              [Input(component_id='site-dropdown', component_property='value'),
              Input(component_id='payload-slider', component_property='value')])
def get_scatter_chart(entered_site, slider_value) :
    scatter_df = spacex_df[["Launch Site","Payload Mass (kg)", "Booster Version Category", "class"]]
    if (entered_site == 'ALL'):
        fig2 = px.scatter(scatter_df[scatter_df["Payload Mass (kg)"].between(slider_value[0], slider_value[1])], 
        x='Payload Mass (kg)', 
        y='class', 
        color="Booster Version Category",
        title='Correlation between Payload and Success for all sites')
    else:
        scatter_filtered = scatter_df[scatter_df["Launch Site"]==entered_site]
        fig2 = px.scatter(scatter_filtered[scatter_filtered["Payload Mass (kg)"].between(slider_value[0], slider_value[1])], 
        x='Payload Mass (kg)', 
        y='class', 
        color="Booster Version Category",
        title='Correlation between Payload and Success for site ' + entered_site)
    return fig2


# Run the app
if __name__ == '__main__':
    app.run_server()
